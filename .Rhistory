# Load the required R packages
library(sf)      # For working with shapefiles
library(leaflet) # For geospatial mapping
library(rgdal)
library(raster)
library(terra)
setwd("D:/Geoinfomatics Study Materials/Second Semster/Geo_Science/RWorking/Ps Project")
# Load the required R packages
library(sf)      # For working with shapefiles
library(leaflet) # For geospatial mapping
library(rgdal)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
library(rgeos)
library(viridis)
library(rasterVis)
library(randomForest)
library(leaflet.extras)
#Load the in-situ data (shapefile)
insitu_shp <- st_read("LULC_Crop-Types_In-SituData2021_USP/LULC_Crop-Types_In-SituData2021_USP.shp")
# View the first few rows of the attribute data
head(insitu_shp)
# List all the column names in shapefile
column_names <- names(insitu_shp)
print(column_names)
# Remove the non-usable columns from  data frame
insitu_shp <- insitu_shp %>%
select(-data_Other, -data_Photo, -data_UserN, -data_Phone, -data_Subsc, -data_Email, -data_EndTi, -data_meta_, -F17, -F18)
# See the unique Crop Types
unique_data_CropT <- unique(insitu_shp$data_CropT)
print(unique_data_CropT)
# See the unique Landuse  Types
unique_data_LULC <- unique(insitu_shp$data_LULC)
print(unique_data_LULC)
insitu_shp <- insitu_shp %>%
mutate(NewColumn = ifelse(data_LULC == "Agriculture", data_CropT, data_LULC))
# View the first few rows of the updated data frame
head(insitu_shp)
insitu_shp <- insitu_shp %>%
mutate(LU_CT = ifelse(data_LULC %in% c("Residential", "WaterBodies", "PublicUse", "CULARCH", "Forest", "Commercial", "Industrial"), "Mixed_Area", data_LULC))
# View the first few rows of the updated data frame
head(insitu_shp)
insitu_shp <- insitu_shp %>%
mutate(LU_CT = ifelse(NewColumn %in% c("Residential", "WaterBodies", "PublicUse", "CULARCH", "Forest", "Commercial", "Industrial"), "Mixed_Area", NewColumn))
# View the first few rows of the updated data frame
head(insitu_shp)
# Again Remove the non-usable columns from  data frame
insitu_shp <- insitu_shp %>%
select(-ClassType, -data_CropT, -data_LULC, -NewColumn)
head(insitu_shp)
# Load the district shapefile
district_shp <- st_read("nepal_data/hermes_NPL_new_wgs_2.shp")
# Define the target districts
target_districts <- c("Dhanusha", "Mahottari", "Sarlahi")
# Filter the shapefile to include only the target districts
filtered_districts <- district_shp[district_shp$DISTRICT %in% target_districts, ]
# Create a leaflet map with OpenStreetMap (OSM) as the base map
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data = filtered_districts, color = "black", weight = 1, opacity = 1, fillOpacity = 0.2) %>%
addCircleMarkers(data = insitu_shp,
lng = ~st_coordinates(insitu_shp$geometry)[, 1],
lat = ~st_coordinates(insitu_shp$geometry)[, 2],
popup = ~LU_CT,
color = ~color_palette(LU_CT),
radius = 1)
red_band <- raster("T45RUK_20211223T045221_B04.jp2")
nir_band <- raster("T45RUK_20211223T045221_B08.jp2")
red_band <- raster("T45RUK_20211223T045221_B04.jp2")
# Filter the shapefile to include only the target districts
filtered_districts <- district_shp[district_shp$DISTRICT %in% target_districts, ]
# Create a leaflet map with OpenStreetMap (OSM) as the base map
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data = filtered_districts, color = "black", weight = 1, opacity = 1, fillOpacity = 0.2) %>%
addCircleMarkers(data = insitu_shp,
lng = ~st_coordinates(insitu_shp$geometry)[, 1],
lat = ~st_coordinates(insitu_shp$geometry)[, 2],
popup = ~LU_CT,
color = ~color_palette(LU_CT),
radius = 1)
# Load the district shapefile
district_shp <- st_read("nepal_data/hermes_NPL_new_wgs_2.shp")
# Define the target districts
target_districts <- c("Dhanusha", "Mahottari", "Sarlahi")
# Filter the shapefile to include only the target districts
filtered_districts <- district_shp[district_shp$DISTRICT %in% target_districts, ]
# Create a leaflet map with OpenStreetMap (OSM) as the base map
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data = filtered_districts, color = "black", weight = 1, opacity = 1, fillOpacity = 0.2) %>%
addCircleMarkers(data = insitu_shp,
lng = ~st_coordinates(insitu_shp$geometry)[, 1],
lat = ~st_coordinates(insitu_shp$geometry)[, 2],
popup = ~LU_CT,
color = ~color_palette(LU_CT),
radius = 1)
# Define the target districts
target_districts <- c("Dhanusha", "Mahottari", "Sarlahi")
# Filter the shapefile to include only the target districts
filtered_districts <- district_shp[district_shp$DISTRICT %in% target_districts, ]
# Create a leaflet map with OpenStreetMap (OSM) as the base map
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data = filtered_districts, color = "black", weight = 1, opacity = 1, fillOpacity = 0.2) %>%
addCircleMarkers(data = insitu_shp,
lng = ~st_coordinates(insitu_shp$geometry)[, 1],
lat = ~st_coordinates(insitu_shp$geometry)[, 2],
popup = ~LU_CT,
color = ~color_palette(LU_CT),
radius = 1)
# Define a custom color palette for the specific class types
color_palette <- colorFactor(
palette = c("lightgreen", "yellow", "darkgreen", "cyan", "orange","purple"),  # Define colors for each class type
domain = c("Sugarcane", "PaddyRice", "Orchid","Bamboo", "OtherCrop", "Mixed_Area")  # Define class types
)
# Create a leaflet map with OpenStreetMap (OSM) as the base map
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addPolygons(data = filtered_districts, color = "black", weight = 1, opacity = 1, fillOpacity = 0.2) %>%
addCircleMarkers(data = insitu_shp,
lng = ~st_coordinates(insitu_shp$geometry)[, 1],
lat = ~st_coordinates(insitu_shp$geometry)[, 2],
popup = ~LU_CT,
color = ~color_palette(LU_CT),
radius = 1)
